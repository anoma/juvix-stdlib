module Data.Nat.Properties;

import Relation.Binary.Definitions;
open Relation.Binary.Definitions;

import Relation.Binary.PropositionalEquality;
open Relation.Binary.PropositionalEquality;

import Relation.Binary.PropositionalEquality.Properties;
open Relation.Binary.PropositionalEquality.Properties;

import Algebra.Definitions;
open Algebra.Definitions;

import Data.Nat;
open Data.Nat;

+-assoc : Associative ℕ (+);
+-assoc zero    _ _ ≔ refl;
+-assoc (suc m) n o ≔ cong suc (+-assoc m n o);

+-identityˡ : LeftIdentity ℕ zero (+);
+-identityˡ _ ≔ refl;

+-identityʳ : RightIdentity ℕ zero (+);
+-identityʳ zero    ≔ refl;
+-identityʳ (suc n) ≔ cong suc (+-identityʳ n);

end;