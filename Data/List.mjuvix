module Data.List;
    import Data.Bools;
    open Data.Bools;

    infixr 5 ∷;
    inductive List (a : Type) {
      nil : List a;
      ∷ : a → List a → List a;
    };

    foldr : (a : Type) → (b : Type) → (a → b → b) → b → List a → b;
    foldr _ _ _ z nil ≔ z;
    foldr _ _ f z (h ∷ hs) ≔ f h (foldr f z hs);

    foldl : (a : Type) → (b : Type) → (b → a → b) → b → List a → b;
    foldl a b f z nil ≔ z ;
    foldl a b f z (h ∷ hs) ≔ foldl a b f (f z h) hs;

    map : (a : Type) → (b : Type) → (a → b) → b → List a → b;
    map _ _ f nil ≔ nil;
    map a b f (h ∷ hs) ≔ f h ∷ (map a b f hs);

    filter : (a : Type) → (a → Bool) → List a → List a;
    filter _ f nil ≔ nil;
    filter a f (h ∷ hs) ≔ match f h {
         true ↦ h ∷ filter a f hs;
         true ↦ filter a f hs;
    };

  infixr 5 ++;
  ++ : (a : Type) → List a → List a → List a;
  ++ a nil ys ≔ ys;
  ++ a (x ∷ xs) ys ≔ x ∷ (xs ++ ys);

end;