module Data.List;

import Data.Bool;
open Data.Bool;
import Function;
open Function;

infixr 5 ∷;
inductive List (a : Type) {
  nil : List a;
  ∷ : a → List a → List a;
};

foldr : {A : Type} → {B : Type} → (A → B → B) → B → List A → B;
foldr _ z nil ≔ z;
foldr f z (h ∷ hs) ≔ f h (foldr f z hs);

foldl : {A : Type} → {B : Type} → (B → A → B) → B → List A → B;
foldl f z nil ≔ z ;
foldl f z (h ∷ hs) ≔ foldl f (f z h) hs;

map : {A : Type} → {B : Type} → (A → B) → List A → List B;
map f nil ≔ nil;
map f (h ∷ hs) ≔ f h ∷ map f hs;

filter : {A : Type} → (A → Bool) → List A → List A;
filter _ nil ≔ nil;
filter f (h ∷ hs) ≔ if (f h)
   (h ∷ filter f hs)
   (filter f hs);

import Data.Nat;
open Data.Nat;

length : {A : Type} → List A → ℕ;
length nil ≔ zero;
length (_ ∷ l) ≔ suc (length l);

reverse : {A : Type} → List A → List A;
reverse ≔ foldl (flip (∷)) nil;

replicate : {A : Type} → ℕ → A → List A;
replicate zero _ ≔ nil;
replicate (suc n) x ≔  x ∷ replicate n x;

take : {A : Type} → ℕ → List A → List A;
take (suc n) (x ∷ xs) ≔ x ∷ take n xs;
take _ _ ≔ nil;

import Data.Ord;
open Data.Ord;

import Data.Product;
open Data.Product;

splitAt : {A : Type} → ℕ → List A → List A × List A;
splitAt _ nil ≔ nil , nil ;
splitAt zero xs ≔  nil , xs;
splitAt (suc zero) (x ∷ xs) ≔ x ∷ nil , xs;
splitAt (suc (suc m)) (x ∷ xs) ≔ first ((∷) x) (splitAt m xs);

merge : {A : Type} → (A → A → Ordering) → List A → List A → List A;
merge cmp (x ∷ xs) (y ∷ ys) ≔
   if (isLT (cmp x y))
    (x ∷ merge cmp xs (y ∷ ys))
    (y ∷ merge cmp (x ∷ xs) ys);
merge _ nil ys ≔ ys;
merge _ xs nil ≔ xs;

partition : {A : Type} → (A → Bool) → List A → List A × List A;
partition _ nil ≔ nil , nil ;
partition f (x ∷ xs) ≔ (if (f x) first second) ((∷) x) (partition f xs);

infixr 5 ++;
++ : {A : Type} → List A → List A → List A;
++ nil ys ≔ ys;
++ (x ∷ xs) ys ≔ x ∷ (xs ++ ys);

qsHelper : {A : Type} → A → List A × List A → List A;
qsHelper a (l , r) ≔ l ++ (a ∷ nil) ++ r;

terminating
quickSort : {A : Type} → (A → A → Ordering) → List A → List A;
quickSort _ nil ≔ nil;
quickSort _ (x ∷ nil) ≔ x ∷ nil;
quickSort cmp (x ∷ xs) ≔
   qsHelper x
   (both (quickSort cmp) (partition (isLT ∘ cmp x) xs));

end;
