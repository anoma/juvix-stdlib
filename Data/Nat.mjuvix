module Data.Nat;
    inductive ℕ  {
      zero : ℕ;
      suc : ℕ → ℕ;
    };

   import Data.Bools;
   open Data.Bools;
   import Data.Ord;
   open Data.Ord;

   compare : ℕ → ℕ → Ordering;
   compare zero zero ≔ EQ;
   compare zero _ ≔ LT;
   compare (suc _) zero ≔ GT;
   compare (suc a) (suc b) ≔ compare a b;

   infixl 6 +;
   + : ℕ → ℕ → ℕ;
   + zero b ≔ b;
   + (suc a) b ≔ suc (a + b);
end;