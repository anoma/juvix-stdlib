module Algebra.Definitions;

import Relation.Binary.PropositionalEquality;
open Relation.Binary.PropositionalEquality;

Associative : (A : Type) → (op : A → A) → Type;
Associative A op ≔ (x : A) → (y : A) → (z : A) → ≡ A (op (op x y) z) (op x (op y z));

Commutative : (A : Type) → (op : A → A) → Type;
Commutative A op ≔ (x : A) → (y : A) → ≡ A (op x y) (op y x);

LeftIdentity : (A : Type) → (e : A) → (op : A → A) → Type;
LeftIdentity A e op ≔ (x : A) → ≡ (op e x) x;

RightIdentity : (A : Type) → (e : A) → (op : A → A) → Type;
RightIdentity A e op ≔ (x : A) → ≡ (op x e) x;

end;