module Stdlib.Trait.Foldable.Polymorphic;

import Stdlib.Function open;

--- A trait for combining elements into a single result, processing one element at a time.
trait
type Foldable (f : Type -> Type) :=
  mkFoldable {-- Combine the elements of the type using the provided function starting with the element in the left-most position.
  foldl : {A B : Type} -> (B -> A -> B) -> B -> f A -> B};

open Foldable public;

--- Combine the elements of the type using the provided function starting with the element in the right-most position.
foldr {f : Type -> Type} {{Foldable f}} {A B : Type} (g : A -> B -> B) : B -> f A -> B :=
  foldl (flip g);

syntax iterator for {init := 1; range := 1};

{-# inline: 0 #-}
for {f : Type -> Type} {A B} {{Foldable f}} : (B -> A -> B) -> B -> f A -> B := foldl;

syntax iterator rfor {init := 1; range := 1};

{-# inline: 0 #-}
rfor {f : Type -> Type} {A B} {{Foldable f}} (i : B → A → B) : B → f A → B := foldr (flip i);
