module Stdlib.Trait.Foldable.Monomorphic;

import Stdlib.Function open;
import Stdlib.Trait.Foldable.Polymorphic as Poly;

--- A trait for combining elements into a single result, processing one element at a time.
trait
type Foldable (container elem : Type) :=
  mkFoldable {-- Combine the elements of the type using the provided function starting with the element in the left-most position.
  foldl : {B : Type} -> (B -> elem -> B) -> B -> container -> B};

open Foldable;

--- Make a monomorphic ;Foldable; instance from a polymorphic one.
--- All polymorphic types that are an instance of ;Poly.Foldable; should use this function to create their monomorphic ;Foldable; instance.
fromPolymorphicFoldable
  {f : Type -> Type} {{foldable : Poly.Foldable f}} {elem} : Foldable (f elem) elem :=
  mkFoldable@{
    foldl : {B : Type} -> (B -> elem -> B) -> B -> f elem -> B := Poly.foldl
  };

--- Combine the elements of the type using the provided function starting with the element in the right-most position.
foldr
  {container elem : Type}
  {{Foldable container elem}}
  {B : Type}
  (g : elem -> B -> B)
  : B -> container -> B := foldl (flip g);

syntax iterator for {init := 1; range := 1};

{-# inline: 0 #-}
for
  {container elem : Type}
  {B}
  {{Foldable container elem}}
  : (B -> elem -> B) -> B -> container -> B := foldl;

syntax iterator rfor {init := 1; range := 1};

{-# inline: 0 #-}
rfor
  {container elem : Type} {B} {{Foldable container elem}} (i : B → elem → B) : B → container → B :=
  foldr (flip i);
