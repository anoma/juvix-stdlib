module Stdlib.Trait.Applicative;

import Stdlib.Data.Fixity open;
import Stdlib.Trait.Functor open;

trait
type Applicative (f : Type -> Type) :=
  mkApplicative {
    {{functor}} : Functor f;
    pure : {A : Type} -> A -> f A;
    ap : {A B : Type} -> f (A -> B) -> f A -> f B
  };

open Applicative public;

--- Sequences computations.
--- Note that this function will be renamed to >>> once IO becomses a polymorphic type and can be given an Applicative instance.
applicativeSeq {f : Type -> Type} {{Applicative f}} {A B : Type} (fa : f A) (fb : f B) : f B :=
  ap (map Î» {_ b := b} fa) fb;
