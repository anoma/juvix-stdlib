module Stdlib.Data.Product;

import Stdlib.Trait.Eq as Eq;
open Eq using {Eq};

import Stdlib.Trait.Ord as Ord;
open Ord using {Ord};

import Stdlib.Trait.Show as Show;
open Show using {Show};

import Stdlib.Data.Product.Base open public;
import Stdlib.Data.Bool.Base open;
import Stdlib.Data.String.Base open;

module ProductTraits;
  Eq {A B} : Eq.Eq A -> Eq.Eq B -> Eq.Eq (A × B)
    | (Eq.mkEq eq-a) (Eq.mkEq eq-b) :=
      Eq.mkEq λ {(a1, b1) (a2, b2) := eq-a a1 a2 && eq-b b1 b2};

  Ord {A B} : Ord.Ord A -> Ord.Ord B -> Ord.Ord (A × B)
    | (Ord.mkOrd cmp-a) (Ord.mkOrd cmp-b) :=
      Ord.mkOrd
        λ {(a1, b1) (a2, b2) :=
          case cmp-a a1 a2
            | Ord.LT := Ord.LT
            | Ord.GT := Ord.GT
            | Ord.EQ := cmp-b b1 b2};

  Show {A B} : Show.Show A -> Show.Show B -> Show.Show (A × B)
    | (Show.mkShow show-a) (Show.mkShow show-b) :=
      Show.mkShow
        λ {(a, b) :=
          "(" ++str show-a a ++str " , " ++str show-b b ++str ")"};
end;
