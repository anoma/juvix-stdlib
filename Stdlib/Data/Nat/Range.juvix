module Stdlib.Data.Nat.Range;

import Stdlib.Data.Fixity open;

import Stdlib.Data.Bool.Base open;
import Stdlib.Data.Nat.Base open;
import Stdlib.Data.Nat.Ord open;

--- A range of natural numbers
type Range :=
  | mkRange {
      low : Nat;
      high : Nat;
      step : Nat
    };

syntax iterator for {init: 1, range: 1};

{-# specialize: [1, 3] #-}
for : {A : Type} → (A → Nat → A) → A → Range → A
  | {A} f a mkRange@{low; high; step} :=
    let
      terminating
      go : A → Nat → A;
      go acc n := if (n > high) acc (go (f acc n) (n + step));
    in go a low;

syntax operator to range;

--- `x to y` is the range [x..y]
to : Nat → Nat → Range
  | l h := mkRange l h 1;

syntax operator step step;

--- `x to y step s` is the range [x,x+s,..,y]
step : Range → Nat → Range
  | r s := r @Range{step := s};
