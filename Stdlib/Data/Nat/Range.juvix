module Stdlib.Data.Nat.Range;

import Stdlib.Data.Bool open;
import Stdlib.Data.Nat open;
import Stdlib.Data.Nat.Ord open;

--- A range of natural numbers
type Range :=
  | mkRange : Nat → Nat → Nat → Range;

syntax iterator for {init: 1, range: 1};
{-# specialize: [1, 3] #-}
for : {A : Type} → (A → Nat → A) → A → Range → A;
for {A} f a (mkRange low high step) :=
  let
    terminating
    go : A → Nat → A;
    go acc n := if (n > high) acc (go (f acc n) (n + step));
  in
  go a low;

syntax infix 5 to;
--- `x to y` is the range [x..y]
to : Nat → Nat → Range;
to l h := mkRange l h 1;

--- `x to y step s` is the range [x,x+s,..,y]
syntax infix 4 step;
step : Range → Nat → Range;
step (mkRange l h _) s := mkRange l h s;
