module Stdlib.Data.Either;

import Stdlib.Data.Either.Base open public;
import Stdlib.Data.Bool.Base open;

import Stdlib.Trait.Eq open;
import Stdlib.Trait.Ord open;

instance
ordEitherI {A B} {{Ord A}} {{Ord B}} : Ord (Either A B) :=
  mkOrd@{
    cmp : Either A B -> Either A B -> Ordering
      | (left a1) (left a2) := Ord.cmp a1 a2
      | (right b1) (right b2) := Ord.cmp b1 b2
      | (left _) (right _) := LT
      | (right _) (left _) := GT
  };

instance
eqEitherI {A B} {{Eq A}} {{Eq B}} : Eq (Either A B) :=
  mkEq@{
    eq : Either A B -> Either A B -> Bool
      | (left a1) (left a2) := a1 == a2
      | (right b1) (right b2) := b1 == b2
      | _ _ := false
  };
