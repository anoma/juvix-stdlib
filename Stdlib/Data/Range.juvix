module Stdlib.Data.Range;

import Stdlib.Data.Fixity open;

import Stdlib.Data.Bool.Base open;
import Stdlib.Trait.Natural open;
import Stdlib.Trait.Ord open;
import Stdlib.Trait.Foldable open;
import Stdlib.Data.Nat open;

--- An inclusive range of naturals
type Range N :=
  mkRange {
    low : N;
    high : N;
    step : N
  };

syntax iterator for {init := 1; range := 1};

{-# specialize: [1, 2, 3, 5] #-}
for {A N} {{Ord N}} {{Natural N}} (f : A → N → A) (a : A) : Range N → A
  | mkRange@{low; high; step} :=
    let
      {-# specialize-by: [f, high, step] #-}
      terminating
      go (acc : A) (n : N) : A := ite (n > high) acc (go (f acc n) (n + step));
    in go a low;

syntax operator to range;

--- `x to y` is the range [x..y]
{-# inline: always #-}
to {N} {{Natural N}} (l h : N) : Range N := mkRange l h 1;

syntax operator step step;

--- `x to y step s` is the range [x, x + s, ..., y]
{-# inline: always #-}
step {N} (r : Range N) (s : N) : Range N := r@Range{step := s};

-- This instance assumes that (low + step*k > high) for some k.
{-# specialize: true, inline: case #-}
instance
foldableRangeI {N} {{Ord N}} {{Natural N}} : Foldable (Range N) N :=
  mkFoldable@{
    {-# specialize: [1, 3] #-}
    for {B : Type} (f : B -> N -> B) (ini : B) : Range N -> B
      | (mkRange low high step) :=
        let
          {-# specialize-by: [f, high, step] #-}
          terminating
          go (acc : B) (next : N) : B :=
            if
              | next > high := acc
              | else := go (f acc next) (next + step);
        in go ini low;
    {-# specialize: [1, 3] #-}
    rfor {B : Type} (f : B -> N -> B) (ini : B) : Range N -> B
      | (mkRange low high step) :=
        let
          {-# specialize-by: [f] #-}
          terminating
          go (base : B) (next : N) : B :=
            if
              | next <= high := f (go base (next + step)) next
              | else := base;
        in go ini low
  };
