module Stdlib.Data.Int;

import Stdlib.Data.Nat;
open Stdlib.Data.Nat using {Nat;suc;zero;sub};
open import Stdlib.Data.String;

module StdlibNat;
  open import Stdlib.Data.Nat public;
end;

builtin int
type Int :=
  | --- ofNat n represents the integer n
    ofNat : Nat -> Int
  | --- negSuc n represents the integer -(n + 1)
    negSuc : Nat -> Int;

toNat : Int -> Nat;
toNat (ofNat n) := n;
toNat (negSuc _) := zero;

builtin int-to-string
axiom
intToString : Int -> String;

builtin int-sub-nat
intSubNat : Nat -> Nat -> Int;
intSubNat m n :=
  case sub n m
    | zero := ofNat (sub m n)
    | suc k := negSuc k;

infixl 6 +;
builtin int-plus
+ : Int -> Int -> Int;
+ (ofNat m) (ofNat n) := ofNat (m StdlibNat.+ n);
+ (ofNat m) (negSuc n) := intSubNat m (suc n);
+ (negSuc m) (ofNat n) := intSubNat n (suc m);
+ (negSuc m) (negSuc n) := negSuc (suc (m StdlibNat.+ n));

builtin int-neg-nat
negNat : Nat -> Int;
negNat zero := ofNat zero;
negNat (suc n) := negSuc n;

builtin int-neg
neg : Int -> Int;
neg (ofNat n) := negNat n;
neg (negSuc n) := ofNat (suc n);

infixl 7 *;
builtin int-mul
* : Int -> Int -> Int;
* (ofNat m) (ofNat n) := ofNat (m StdlibNat.* n);
* (ofNat m) (negSuc n) := negNat (m StdlibNat.* suc n);
* (negSuc m) (ofNat n) := negNat (suc m StdlibNat.* n);
* (negSuc m) (negSuc n) := ofNat (suc m StdlibNat.* suc n);

builtin int-div
div : Int -> Int -> Int;
div (ofNat m) (ofNat n) := ofNat (StdlibNat.div m n);
div (ofNat m) (negSuc n) :=
  negNat (StdlibNat.div m (suc n));
div (negSuc m) (ofNat n) :=
  negNat (StdlibNat.div (suc m) n);
div (negSuc m) (negSuc n) :=
  ofNat (StdlibNat.div (suc m) (suc n));
