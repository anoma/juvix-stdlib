module Stdlib.Data.Int.Range;

import Stdlib.Data.Fixity open;

import Stdlib.Data.Bool open;
import Stdlib.Data.Int open;
import Stdlib.Data.Int.Ord open;

--- A range of integers
type Range :=
  mkRange {
    low : Int;
    high : Int;
    step : Int
  };

syntax iterator for {init := 1; range := 1};

{-# specialize: [1, 3] #-}
for {A} (f : A → Int → A) (a : A) : Range → A
  | mkRange@{low; high; step} :=
    let
      terminating
      go (acc : A) (n : Int) : A :=
        if (n > high) acc (go (f acc n) (n + step));
    in go a low;

syntax operator to range;

to (l h : Int) : Range := mkRange l h 1;

syntax operator step step;

step (r : Range) (s : Int) : Range := r@Range{step := s};
