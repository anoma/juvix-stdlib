module Stdlib.Data.Either.Base;

import Stdlib.Data.Bool.Base open;
import Stdlib.Data.Maybe.Base open;
import Stdlib.Function open;

--- The Either type represents values with two possibilities.
type Either A B :=
  | left A
  | right B;

--- Apply the onLeft function if the value is ;left; or apply the
--- onRight function if the value is ;right;.
either
  {A B C}
  (onLeft : A -> C)
  (onRight : B -> C)
  : Either A B -> C
  | (left a) := onLeft a
  | (right b) := onRight b;

--- Apply a function to the ;left; value of an Either.
mapLeft {A B C} (f : A -> C) : Either A B -> Either C B :=
  either (f >> left) right;

--- Apply a function to the ;right; value of an Either.
mapRight {A B C} (f : B -> C) : Either A B -> Either A C :=
  either left (f >> right);

--- Return ;true; if the value is ;left;, otherwise ;false;.
isLeft {A B} : Either A B -> Bool
  | (left _) := true
  | (right _) := false;

--- Return ;true; if the value is ;right;, otherwise ;false;.
isRight {A B} : Either A B -> Bool
  | (left _) := false
  | (right _) := true;

--- Return the contents of a ;left; value, otherwise return a default.
fromLeft {A B} (default : A) : Either A B -> A
  | (left a) := a
  | (right _) := default;

--- Return the contents of a ;right; value, otherwise return a default.
fromRight {A B} (default : B) : Either A B -> B
  | (left _) := default
  | (right b) := b;

--- Return the contents of an Either value where both possibilities have the
--- same type.
fromEither {A} : Either A A -> A := either id id;

--- Convert an Either to a Maybe. A ;left; value becomes `nothing`.
eitherToMaybe {A B} : Either A B -> Maybe B :=
  either (const nothing) just;

--- Convert a Maybe to an Either. A ;nothing; value becomes `left defaultValue`.
maybeToEither
  {A B} (defaultLeft : A) : Maybe B -> Either A B
  | nothing := left defaultLeft
  | (just x) := right x;
