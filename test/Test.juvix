module Test;

import Stdlib.Prelude open;
import Stdlib.Extra.Gcd open;
import Stdlib.Trait.Ord as Ord;

import Data.List open;
import Data.String open;

import Test.QuickCheckTest as QC;
import Test.Arb as QC;
import Test.StdlibTestExtra;

prop-reverseDoesNotChangeLength : List Int -> Bool
  | xs := length (reverse xs) == length xs;

prop-reverseReverseIsIdentity : List Int -> Bool
  | xs := eqListInt xs (reverse (reverse xs));

prop-tailLengthOneLess : List Int -> Bool
  | xs :=
    null xs
      || ofNat (length (tail xs)) == intSubNat (length xs) 1;

prop-splitAtRecombine : Nat -> List Int -> Bool
  | n xs :=
    case splitAt n xs of
      lhs, rhs := eqListInt xs (lhs ++ rhs);

prop-splitAtLength : Nat -> List Int -> Bool
  | n xs :=
    case
      splitAt n (xs ++ replicate (sub n (length xs)) (ofNat 0))
    of
      lhs, rhs :=
        length lhs == n && length rhs == sub (length xs) n;
-- Make sure the list has length at least n

prop-mergeSumLengths : List Int -> List Int -> Bool
  | xs ys := length xs + length ys == length (merge xs ys);

prop-partition : List Int -> (Int -> Bool) -> Bool
  | xs p :=
    case partition p xs of
      lhs, rhs :=
        all p lhs
          && not (any p rhs)
          && eqListInt (sortInt xs) (sortInt (lhs ++ rhs));

prop-distributive : Int -> Int -> (Int -> Int) -> Bool
  | a b f := f (a + b) == f a + f b;

prop-add-sub : Int -> Int -> Bool
  | a b := a == a + b - b;

prop-add-sub-bad : Int -> Int -> Bool
  | a b := a == ofNat 2;

prop-gcd-bad : Int -> Int -> Bool
  | a b := gcd a b > ofNat 1;

prop-equal-compare-to-eq : Nat -> Bool
  | a := Ord.isEQ (Ord.cmp a a);

prop-sort : (List Int -> List Int) -> List Int -> Bool
  | sort xs :=
    let
      sorted : List Int := sort xs;
      isSorted : List Int -> Bool
        | nil := true
        | (_ :: nil) := true
        | (x :: y :: xs) := x <= y && isSorted (y :: xs);
    in length sorted == length xs
      && eqListInt sorted (sort sorted)
      && isSorted sorted;

prop-zip : List Int -> List Int -> Bool
  | xs ys :=
    let
      zs : List (Pair Int Int) := zip xs ys;
      expectedLen : Nat := min (length xs) (length ys);
    in length zs == expectedLen
      && eqListInt (take expectedLen xs) (map fst zs)
      && eqListInt (take expectedLen ys) (map snd zs);

prop-zipWith
  : (Int -> Int -> Int) -> List Int -> List Int -> Bool
  | f xs ys :=
    let
      zs : List Int := zipWith f xs ys;
      zsFlip : List Int := zipWith (flip f) ys xs;
      expectedLen : Nat := min (length xs) (length ys);
    in length zs == expectedLen
      && eqListInt zs zsFlip
      && eqListInt (map λ {x := f x x} xs) (zipWith f xs xs);

prop-snoc : List Int -> Int -> Bool
  | xs x :=
    let
      snoc-x : List Int := snoc xs x;
    in eqListInt snoc-x (reverse (x :: reverse xs));

prop-drop : Nat -> List Int -> Bool
  | n xs :=
    let
      drop-n : List Int := drop n xs;
    in length drop-n <= length xs
      && eqListInt (drop n (drop n xs)) (drop (2 * n) xs);

-- Assumption: The input list represents a rectangular matrix
prop-transposeMatrixId : List (List Int) -> Bool
  | xs := Eq.eq xs (transpose (transpose xs));

-- Assumption: The input list represents a rectangular matrix
prop-transposeMatrixDimensions : List (List Int) -> Bool
  | xs :=
    let
      txs : List (List Int) := transpose xs;
      checkTxsRowXsCol : Bool :=
        case xs of
          | x :: _ := length txs == length x
          | _ := null txs;
      checkXsRowTxsCol : Bool :=
        case txs of
          | tx :: _ := length xs == length tx
          | _ := null xs;
    in checkTxsRowXsCol && checkXsRowTxsCol;

prop-foundElementSatisfiesPredicate
  (p : Int -> Bool) (xs : List Int) : Bool :=
  case find p xs of
    | just x := p x
    | nothing := true;

prop-nonExistenceImpliesPredicateFalseForAll
  (p : Int -> Bool) (xs : List Int) : Bool :=
  case find p xs of
    | just _ := true
    | nothing := all (x in xs) not (p x);

prop-findConsistentWithSplitAt
  (n : Nat) (p : Int -> Bool) (xs : List Int) : Bool :=
  let
    ys×zs := splitAt n xs;
    ys := fst ys×zs;
    zs := snd ys×zs;
  in case find p xs of
       | just x :=
         if
           | elem (==) x ys := find p ys == just x
           | elem (==) x zs := find p zs == just x
           | else := false
       | nothing := true;

prop-findWithEmptyList (p : Int -> Bool) : Bool :=
  find p [] == nothing;

prop-findWithAlwaysTrueIsJust (xs : List Int) : Bool :=
  if
    | null xs := true
    | else :=
      case find (const true) xs of
        | just _ := true
        | nothing := false;

prop-findWithAlwaysFalseIsNothing (xs : List Int) : Bool :=
  find (const false) xs == nothing;

prop-eitherLeftApplication
  (f : Int -> Int) (g : Int -> Int) (x : Int) : Bool :=
  either f g (left x) == f x;

prop-eitherRightApplication
  (f : Int -> Int) (g : Int -> Int) (x : Int) : Bool :=
  either f g (right x) == g x;

prop-eitherIsLeft : Either Int Bool -> Bool
  | x@(left _) := isLeft x
  | x@(right _) := not (isLeft x);

prop-eitherIsRight : Either Int Bool -> Bool
  | x@(left _) := not (isRight x)
  | x@(right _) := isRight x;

prop-eitherFromLeftDefault
  (defaultLeft : Int) : Either Int Bool -> Bool
  | e@(left x) := fromLeft defaultLeft e == x
  | e@(right _) := fromLeft defaultLeft e == defaultLeft;

prop-eitherFromRightDefault
  (defaultRight : Bool) : Either Int Bool -> Bool
  | e@(left _) := fromRight defaultRight e == defaultRight
  | e@(right x) := fromRight defaultRight e == x;

prop-eitherToMaybe : Either Int Bool -> Bool
  | e@(left _) := eitherToMaybe e == nothing
  | e@(right x) := eitherToMaybe e == just x;

prop-maybeToEither (def : Int) : Maybe Bool -> Bool
  | m@(just x) := maybeToEither def m == right x
  | m@nothing := maybeToEither def m == left def;

prop-eitherMapLeft (f : Int -> Int) : Either Int Int -> Bool
  | e@(left x) := mapLeft f e == left (f x)
  | e@(right _) := mapLeft f e == e;

prop-eitherMapRight (f : Int -> Int) : Either Int Int -> Bool
  | e@(left _) := mapRight f e == e
  | e@(right x) := mapRight f e == right (f x);

sortTest : String -> (List Int -> List Int) -> QC.Test
  | sortName sort :=
    QC.mkTest
      ("sort properties: " ++str sortName)
      (prop-sort sort);

dropTest : QC.Test := QC.mkTest "drop properties" prop-drop;

snocTest : QC.Test := QC.mkTest "snoc properties" prop-snoc;

zipTest : QC.Test := QC.mkTest "zip properties" prop-zip;

zipWithTest : QC.Test :=
  QC.mkTest "zipWith properties" prop-zipWith;

equalCompareToEqTest : QC.Test :=
  QC.mkTest
    "equal Nats compare to EQ"
    prop-equal-compare-to-eq;

gcdNoCoprimeTest : QC.Test :=
  QC.mkTest "no integers are coprime" prop-gcd-bad;

partitionTest : QC.Test :=
  QC.mkTest
    "partition: recombination of the output equals the input"
    prop-partition;

testDistributive : QC.Test :=
  QC.mkTest
    "all functions are distributive over +"
    prop-distributive;

reverseLengthTest : QC.Test :=
  QC.mkTest
    "reverse preserves length"
    prop-reverseDoesNotChangeLength;

reverseReverseIdTest : QC.Test :=
  QC.mkTest
    "reverse of reverse is identity"
    prop-reverseReverseIsIdentity;

splitAtRecombineTest : QC.Test :=
  QC.mkTest
    "splitAt: recombination of the output is equal to the input list"
    prop-splitAtRecombine;

splitAtLengthTest : QC.Test :=
  QC.mkTest
    "splitAt: Check lengths of output if the input Nat is greater than the length of the input list"
    prop-splitAtLength;

mergeSumLengthsTest : QC.Test :=
  QC.mkTest
    "merge: sum of the lengths of input lists is equal to the length of output list"
    prop-mergeSumLengths;

tailLengthOneLessTest : QC.Test :=
  QC.mkTest
    "tail: length of output is one less than input unless empty"
    prop-tailLengthOneLess;

transposeMatrixIdTest : QC.Test :=
  QC.mkTest
    {{QC.testableFunction {{showListI}} {{QC.arbitraryMatrix}}}}
    "transpose: recrangular matrix has property transpose . transpose = id"
    prop-transposeMatrixId;

transposeMatrixDimentionsTest : QC.Test :=
  QC.mkTest
    {{QC.testableFunction {{showListI}} {{QC.arbitraryMatrix}}}}
    "transpose: transpose swaps dimensions"
    prop-transposeMatrixDimensions;

findFoundElementSatisfiesPredicate : QC.Test :=
  QC.mkTest
    "find: found element satisfies predicate"
    prop-foundElementSatisfiesPredicate;

findNonExistenceImpliesPredicateFalseForAll : QC.Test :=
  QC.mkTest
    "find: non existence implies predicate false for all"
    prop-nonExistenceImpliesPredicateFalseForAll;

findConsistentWithSplitAt : QC.Test :=
  QC.mkTest
    "find: consistent with splitAt"
    prop-findConsistentWithSplitAt;

findOnEmptyListIsNothing : QC.Test :=
  QC.mkTest
    "find: called with empty list is nothing"
    prop-findWithEmptyList;

findWithAlwaysTrueIsJust : QC.Test :=
  QC.mkTest
    "find: always true predicate returns just"
    prop-findWithAlwaysTrueIsJust;

findWithAlwaysFalseIsNothing : QC.Test :=
  QC.mkTest
    "find: always false predicate returns nothing"
    prop-findWithAlwaysFalseIsNothing;

eitherEitherLeftApplication : QC.Test :=
  QC.mkTest
    "either: either left application"
    prop-eitherLeftApplication;

eitherEitherRightApplication : QC.Test :=
  QC.mkTest
    "either: either right application"
    prop-eitherRightApplication;

eitherIsLeft : QC.Test :=
  QC.mkTest "either: isLeft detects left" prop-eitherIsLeft;

eitherIsRight : QC.Test :=
  QC.mkTest
    "either: isRight detects right"
    prop-eitherIsRight;

eitherFromLeft : QC.Test :=
  QC.mkTest
    "either: fromLeft uses default"
    prop-eitherFromLeftDefault;

eitherFromRight : QC.Test :=
  QC.mkTest
    "either: fromRight uses default"
    prop-eitherFromRightDefault;

eitherEitherToMaybe : QC.Test :=
  QC.mkTest
    "either: eitherToMaybe"
    prop-eitherToMaybe;

eitherMaybeToEither : QC.Test :=
  QC.mkTest
    "either: maybeToEither"
    prop-maybeToEither;

eitherMapLeft : QC.Test :=
  QC.mkTest
    "either: mapLeft"
    prop-eitherMapLeft;

eitherMapRight : QC.Test :=
  QC.mkTest
    "either: mapRight"
    prop-eitherMapRight;

main : IO :=
  readLn
    \ {seed :=
      let
        seedNat := stringToNat seed;
      in QC.runTestsIO
          100
          seedNat
          [ partitionTest
          ; reverseLengthTest
          ; reverseReverseIdTest
          ; splitAtRecombineTest
          ; splitAtLengthTest
          ; mergeSumLengthsTest
          ; tailLengthOneLessTest
          ; equalCompareToEqTest
          ; zipTest
          ; zipWithTest
          ; snocTest
          ; dropTest
          ; sortTest "mergeSort" mergeSort
          ; sortTest "quickSort" quickSort
          ; transposeMatrixIdTest
          ; transposeMatrixDimentionsTest
          ; findFoundElementSatisfiesPredicate
          ; findNonExistenceImpliesPredicateFalseForAll
          ; findConsistentWithSplitAt
          ; findOnEmptyListIsNothing
          ; findWithAlwaysTrueIsJust
          ; findWithAlwaysFalseIsNothing
          ]
        >>> QC.runTestsIO
          100
          seedNat
          [ eitherEitherLeftApplication
          ; eitherEitherRightApplication
          ; eitherIsLeft
          ; eitherIsRight
          ; eitherFromLeft
          ; eitherFromRight
          ; eitherEitherToMaybe
          ; eitherMaybeToEither
          ; eitherMapLeft
          ; eitherMapRight
          ]};
