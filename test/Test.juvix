module Test;

import Stdlib.Prelude open hiding {+};

import Stdlib.Data.Nat.Ord as Nat;
import Stdlib.Data.Nat as Nat;
import Stdlib.Trait.Ord as Ord;

import Stdlib.Data.Int.Ord open;
import Stdlib.Data.Int open;
import Data.List open;
import Data.String open;
import Data.Int open;

import Test.QuickCheckTest as QC;
import Test.Arb as QC;

prop-reverseDoesNotChangeLength : List Int -> Bool
  | xs := length (reverse xs) Nat.== length xs;

prop-reverseReverseIsIdentity : List Int -> Bool
  | xs := eqListInt xs (reverse (reverse xs));

prop-tailLengthOneLess : List Int -> Bool
  | xs :=
    null xs
      || ofNat (length (tail xs)) == intSubNat (length xs) 1;

prop-splitAtRecombine : Nat -> List Int -> Bool
  | n xs :=
    case splitAt n xs of {lhs, rhs :=
      eqListInt xs (lhs ++ rhs)};

prop-splitAtLength : Nat -> List Int -> Bool
  | n xs :=
    case splitAt
      n
      (xs ++ replicate (sub n (length xs)) (ofNat 0)) of {lhs
      , rhs :=
      length lhs Nat.== n
        && length rhs Nat.== sub (length xs) n};
-- Make sure the list has length at least n

prop-mergeSumLengths : List Int -> List Int -> Bool
  | xs ys :=
    length xs Nat.+ length ys
      Nat.== length (merge ordIntI xs ys);

prop-partition : List Int -> (Int -> Bool) -> Bool
  | xs p :=
    case partition p xs of {lhs, rhs :=
      all p lhs
        && not (any p rhs)
        && eqListInt (sortInt xs) (sortInt (lhs ++ rhs))};

prop-distributive : Int -> Int -> (Int -> Int) -> Bool
  | a b f := f (a + b) == f a + f b;

prop-add-sub : Int -> Int -> Bool
  | a b := a == a + b - b;

prop-add-sub-bad : Int -> Int -> Bool
  | a b := a == 2;

prop-gcd-bad : Int -> Int -> Bool
  | a b := gcd a b > 1;

prop-equal-compare-to-eq : Nat -> Bool
  | a := Ord.isEQ (Nat.compare a a);

prop-sort : (List Int -> List Int) -> List Int -> Bool
  | sort xs :=
    let
      sorted : List Int := sort xs;
      isSorted : List Int -> Bool
        | nil := true
        | (_ :: nil) := true
        | (x :: y :: xs) := x <= y && isSorted (y :: xs);
    in length sorted Nat.== length xs
      && eqListInt sorted (sort sorted)
      && isSorted sorted;

prop-zip : List Int -> List Int -> Bool
  | xs ys :=
    let
      zs : List (Int × Int) := zip xs ys;
      expectedLen : Nat := Nat.min (length xs) (length ys);
    in length zs Nat.== expectedLen
      && eqListInt (take expectedLen xs) (map fst zs)
      && eqListInt (take expectedLen ys) (map snd zs);

prop-zipWith
  : (Int -> Int -> Int) -> List Int -> List Int -> Bool
  | f xs ys :=
    let
      zs : List Int := zipWith f xs ys;
      zsFlip : List Int := zipWith (flip f) ys xs;
      expectedLen : Nat := Nat.min (length xs) (length ys);
    in length zs Nat.== expectedLen
      && eqListInt zs zsFlip
      && eqListInt (map λ {x := f x x} xs) (zipWith f xs xs);

prop-snoc : List Int -> Int -> Bool
  | xs x :=
    let
      snoc-x : List Int := snoc xs x;
    in eqListInt snoc-x (reverse (x :: reverse xs));

prop-drop : Nat -> List Int -> Bool
  | n xs :=
    let
      drop-n : List Int := drop n xs;
    in length drop-n Nat.<= length xs
      && eqListInt (drop n (drop n xs)) (drop (2 Nat.* n) xs);

-- Assumption: The input list represents a rectangular matrix
prop-transposeMatrixId : List (List Int) -> Bool
  | xs := Eq.eq xs (transpose (transpose xs));

-- Assumption: The input list represents a rectangular matrix
prop-transposeMatrixDimensions : List (List Int) -> Bool
  | xs :=
    let
      txs : List (List Int) := transpose xs;
      checkTxsRowXsCol : Bool :=
        case xs of {
          | x :: _ := length txs Nat.== length x
          | _ := null txs
        };
      checkXsRowTxsCol : Bool :=
        case txs of {
          | tx :: _ := length xs Nat.== length tx
          | _ := null xs
        };
    in checkTxsRowXsCol && checkXsRowTxsCol;

sortTest : String -> (List Int -> List Int) -> QC.Test
  | sortName sort :=
    QC.mkTest
      ("sort properties: " ++str sortName)
      (prop-sort sort);

dropTest : QC.Test :=
  QC.mkTest
    "drop properties"
    prop-drop;

snocTest : QC.Test :=
  QC.mkTest
    "snoc properties"
    prop-snoc;

zipTest : QC.Test :=
  QC.mkTest
    "zip properties"
    prop-zip;

zipWithTest : QC.Test :=
  QC.mkTest
    "zipWith properties"
    prop-zipWith;

equalCompareToEqTest : QC.Test :=
  QC.mkTest
    "equal Nats compare to EQ"
    prop-equal-compare-to-eq;

gcdNoCoprimeTest : QC.Test :=
  QC.mkTest
    "no integers are coprime"
    prop-gcd-bad;

partitionTest : QC.Test :=
  QC.mkTest
    "partition: recombination of the output equals the input"
    prop-partition;

testDistributive : QC.Test :=
  QC.mkTest
    "all functions are distributive over +"
    prop-distributive;

reverseLengthTest : QC.Test :=
  QC.mkTest
    "reverse preserves length"
    prop-reverseDoesNotChangeLength;

reverseReverseIdTest : QC.Test :=
  QC.mkTest
    "reverse of reverse is identity"
    prop-reverseReverseIsIdentity;

splitAtRecombineTest : QC.Test :=
  QC.mkTest
    "splitAt: recombination of the output is equal to the input list"
    prop-splitAtRecombine;

splitAtLengthTest : QC.Test :=
  QC.mkTest
    "splitAt: Check lengths of output if the input Nat is greater than the length of the input list"
    prop-splitAtLength;

mergeSumLengthsTest : QC.Test :=
  QC.mkTest
    "merge: sum of the lengths of input lists is equal to the length of output list"
    prop-mergeSumLengths;

tailLengthOneLessTest : QC.Test :=
  QC.mkTest
    "tail: length of output is one less than input unless empty"
    prop-tailLengthOneLess;

transposeMatrixIdTest : QC.Test :=
  QC.mkTest
    "transpose: recrangular matrix has property transpose . transpose = id"
    prop-transposeMatrixId;

transposeMatrixDimentionsTest : QC.Test :=
  QC.mkTest
    "transpose: transpose swaps dimensions"
    prop-transposeMatrixDimensions;

main : IO :=
  readLn
    \ {seed :=
      QC.runTestsIO
        100
        (stringToNat seed)
        (partitionTest
          :: reverseLengthTest
          :: reverseReverseIdTest
          :: splitAtRecombineTest
          :: splitAtLengthTest
          :: mergeSumLengthsTest
          :: tailLengthOneLessTest
          :: equalCompareToEqTest
          :: zipTest
          :: zipWithTest
          :: snocTest
          :: dropTest
          :: sortTest "mergeSort" (mergeSort ordIntI)
          :: sortTest "quickSort" (quickSort ordIntI)
          :: transposeMatrixIdTest
          :: transposeMatrixDimentionsTest
          :: nil)};
