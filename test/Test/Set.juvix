module Test.Set;

import Test.JuvixUnit open;
import Stdlib.Prelude open;
import Stdlib.Debug as Debug;

import Stdlib.Data.Set as Set open;

type Box :=
  mk@{
    b : Nat;
  };

instance
ordBoxI : Ord Box := Ord.mk (Ord.compare on Box.b);

--- Test for size and balance.
mkTests {A} (descr : TestDescr A) : List Test :=
  case descr of
    TestDescr.mk@{testTitle; testLen; testSet} :=
      let
        mkTitle : String -> String
          | m := testTitle ++str " " ++str m;
        sizeMsg : String := "sizes do not match";
        balanceMsg : String := "not balanced";
      in [
           testCase
             (mkTitle "size")
             (assertEqual sizeMsg (size testSet) testLen);
           testCase
             (mkTitle "balanced")
             (assertTrue balanceMsg (Internal.isBalanced testSet));
         ];

type TestDescr (A : Type) :=
  mk@{
    testTitle : String;
    testLen : Nat;
    testSet : Set A;
  };

s1Tree : Set Nat := fromList [1; 2; 8; 3; 3; 2; 9];

s2Tree : Set Nat := fromList [1; 3; 0; 4; 4; 8; 2];

s1 : TestDescr Nat := TestDescr.mk "s1" 5 s1Tree;

s2 : TestDescr Nat := TestDescr.mk "s2" 6 s2Tree;

s2Delete : TestDescr Nat :=
  TestDescr.mk@{
    testTitle := TestDescr.testTitle s2 ++str "-delete";
    testLen := sub (TestDescr.testLen s2) 2;
    testSet := deleteMany [1; 8] (TestDescr.testSet s2);
  };

s2DeleteWith : TestDescr Box :=
  TestDescr.mk@{
    testTitle := TestDescr.testTitle s2 ++str "-delete-with";
    testLen := sub (TestDescr.testLen s2) 2;
    testSet :=
      deleteManyWith Box.b [1; 8] (TestDescr.testSet s2 |> Set.map Box.mk);
  };

s3 : TestDescr Nat :=
  TestDescr.mk@{
    testTitle := "s3";
    testLen := 6;
    testSet := fromList [5; 4; 3; 2; 1; 0];
  };

s4 : TestDescr Nat :=
  TestDescr.mk@{
    testTitle := "s4";
    testLen := 5;
    testSet := fromList [1; 2; 3; 4; 5];
  };

tests : List Test :=
  [
    testCase "s1-member" (assertTrue "isMember 3 s1" (Set.isMember 3 s1Tree));
    testCase
      "s1-s2-intersection"
      (assertEqual
        "intersection s1Tree s2Tree"
        (intersection s1Tree s2Tree)
        (fromList [1; 2; 3; 8]));
    testCase
      "s1-s2-difference"
      (assertEqual
        "difference s1Tree s2Tree"
        (difference s1Tree s2Tree)
        (fromList [9]));
    testCase
      "s1-s2-union"
      (assertEqual
        "union s1Tree s2Tree"
        (union s1Tree s2Tree)
        (fromList [0; 1; 2; 3; 4; 8; 9]));
    testCase
      "s2-filter"
      (assertEqual
        "filter (> 3) s2"
        [0; 1; 2]
        (Set.filter ((>) 3) s2Tree |> Set.toList));
    testCase "s2-all" (assertTrue "all (> 9) s2" (Set.all ((>) 9) s2Tree));
    testCase "s2-any" (assertTrue "any (< 3) s2" (Set.any ((<) 3) s2Tree));
    testCase
      "s2-partition"
      (assertEqual
        "partition (< 3) s2"
        ([0; 1; 2], [3; 4; 8])
        (Set.partition ((>) 3) s2Tree |> both Set.toList));
    testCase "s2-lookup" (assertJust "lookup 4 s2" (lookup 4 s2Tree));
    testCase
      "s2-lookup"
      (assertNothing (const "lookup 5 s2") (lookup 5 s2Tree));
    testCase
      "s2-lookup"
      (assertNothing (const "lookup 6 s2") (lookup 6 s2Tree));
    testCase
      "s1-s2-not-isSubset"
      (assertFalse "isSubset s1 s2" (isSubset s1Tree s2Tree));
    testCase
      "s2-s1-not-isSubset"
      (assertFalse "isSubset s2 s1" (isSubset s2Tree s1Tree));
    testCase
      "singleton-s2-isSubset"
      (assertTrue "isSubset (singleton 1) s2" (isSubset (singleton 1) s2Tree));
    testCase
      "s2-foldr"
      (assertEqual "foldr (+) 0 s2" 18 (Set.foldr (+) 0 s2Tree));
    testCase
      "s2-foldl"
      (assertEqual "foldl (+) 0 s2" 18 (Set.foldl (+) 0 s2Tree));
    testCase
      "s2-map"
      (assertEqual
        "map (+ 1) s2"
        [1; 2; 3; 4; 5; 9]
        (Set.map ((+) 1) s2Tree |> Set.toList));
    testCase "for ascending iteration"
      <| assertEqual "for iterates in ascending order" [1; 2; 3; 4]
      <| for (acc := []) (k in fromList [3; 2; 4; 1]) {
        acc ++ [k]
      };
    testCase "rfor ascending iteration"
      <| assertEqual "rfor iterates in descending order" [4; 3; 2; 1]
      <| rfor (acc := []) (k in fromList [3; 2; 4; 1]) {
        acc ++ [k]
      };
    testCase "disjointUnion disjoint"
      <| assertEqual "disjointUnion for disjoint" (ok (fromList [0; 1; 2; 3]))
      <| disjointUnion (fromList [0; 3]) (fromList [1; 2]);
    testCase "disjointUnion not disjoint"
      <| assertEqual "disjointUnion for non-disjoint" (error 0)
      <| disjointUnion (fromList [0; 3]) (fromList [0; 1; 2]);
  ]
    ++ concatMap mkTests [s1; s2; s3; s4; s2Delete];

suite : TestSuite := testSuite "AVL Set" tests;

main : IO :=
  printStringLn (pretty s1Tree)
    >>> printStringLn (prettyDebug s1Tree)
    >>> runTestSuite suite;
