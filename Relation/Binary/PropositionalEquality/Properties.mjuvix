module Relation.Binary.PropositionalEquality.Properties;

  import Relation.Binary.Definitions;
  open Relation.Binary.Definitions;

  import Relation.Binary.PropositionalEquality;
  open Relation.Binary.PropositionalEquality;

  cong : (A : Type) → (B : Type) → (x : A) → (y : A) → (f : A → B) → ≡ A x y → ≡ B (f x) (f y);
  cong A B x y f refl ≔ refl;

  reflexive : (A : Type) → Reflexive A (≡ A);
  reflexive A x ≔ refl;

  symmetric : (A : Type) → Symmetric A (≡ A);
  symmetric A x y refl ≔ refl;

  transitive : (A : Type) → Transitive A (≡ A);
  transitive refl refl ≔ refl;

end;